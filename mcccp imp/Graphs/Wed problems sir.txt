Wed problems sir:
1) bfsAdjMatrix
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of nodes: ");
        int n = sc.nextInt();

        int adj[][] = new int[n][n];
        while (true) {
            System.out.print("To add edge, enter source vertex and destination vertex(from 0 to n-1): ");
            int u = sc.nextInt();
            int v = sc.nextInt();
            adj[u][v] = 1;

            System.out.print("Add more edges(1/0)? ");
            int ch = sc.nextInt();
            if (ch == 0) 
                break;
        }
        System.out.print("Enter starting vertex: ");
        int start = sc.nextInt();
        System.out.print("DFS Traversal: ");
        bfs(adj, n, start);
    }

    static void bfs(int[][] adj, int n, int start) {
        boolean[] visited = new boolean[n];
        Queue<Integer> q = new ArrayDeque<>();
        q.add(start);
        visited[start] = true;
        while (!q.isEmpty()) {
            start = q.poll();
            System.out.print(start + " ");

            for (int i = 0; i < n; i++) {
                if (adj[start][i] == 1 && visited[i] == false) {
                    q.add(i);
                    visited[i] = true;
                }
            }
        }
    }

2) bfsAdjList
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no.of nodes: ");
        int n = sc.nextInt();

        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        while(true) {
            System.out.print("To add edge, enter source vertex and detination vertex(from o to n-1): ");
            int u = sc.nextInt();
            int v = sc.nextInt();

            if(!hm.containsKey(u)) {
                ArrayList<Integer> lst = new ArrayList<>();
                lst.add(v);
                hm.put(u, lst);
            } else {
                hm.get(u).add(v);
            }

            System.out.print("Add more edges(1/0)? ");
            int ch = sc.nextInt();
            if(ch==0) break;
        }

        System.out.print("Enter starting vertex: ");
        int start = sc.nextInt();
        int[] visited = new int[n];
        System.out.print("DFS Traversal: ");
        bfs(hm, start, visited);
    }

    static void bfs(HashMap<Integer, ArrayList<Integer>> hm, int curr, int[] visited) {
        Queue<Integer> q = new ArrayDeque<>();
        q.add(curr);
        visited[curr] = 1;

        while(!q.isEmpty()) {
            curr = q.poll();
            System.out.print(curr + " ");

            for(int i : hm.get(curr)) {
                if(visited[i]==0) {
                    q.add(i);
                    visited[i] = 1;
                }
            }
        }
    }

3) leastCommonAncestor
public static void main(String[] args) {
        TreeNode root = null;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no.of nodes: ");
        int n = sc.nextInt();

        for(int i=0; i<n; i++) {
            System.out.print("Enter val: ");
            int val = sc.nextInt();
            root = insertWithRecursion(root, val);
        }

        int n1 = sc.nextInt();
        int n2 = sc.nextInt();
        System.out.println("LCA is: " + lca(root, n2, n2));
    }

    public static TreeNode insertWithRecursion(TreeNode root, int val) {
        if(root==null) {
            return new TreeNode(val);
        }

        if(val<root.val) {
            root.left = insertWithRecursion(root.left, val);
        } else {
            root.right = insertWithRecursion(root.right, val);
        }

        return root;
    }

    static int lca(TreeNode root, int n1, int n2) {
        while(root!=null) {
            if(root.val < n1 && root.val < n2) {
                root = root.right;
            } else if(root.val > n1 && root.val > n2) {
                root =  root.left;
            } else break;
        }
        return root.val;
    }

4) topView
public static void main(String[] args) {
        TreeNode root = null;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no.of nodes: ");
        int n = sc.nextInt();

        for(int i=0; i<n; i++) {
            System.out.print("Enter val: ");
            int val = sc.nextInt();
            root = insertWithRecursion(root, val);
        }

        topView(root);
    }

    static TreeNode insertWithRecursion(TreeNode root, int val) {
        if(root==null) {
            return new TreeNode(val);
        }

        if(val<root.val) {
            root.left = insertWithRecursion(root.left, val);
        } else {
            root.right = insertWithRecursion(root.right, val);
        }

        return root;
    }

    static void topView(TreeNode root) {
        TreeNode r = root;
        Stack<TreeNode> s = new Stack<>();
        Queue<TreeNode> q = new ArrayDeque<>();

        while(root.left!=null) {
            s.push(root);
            root = root.left;
        }

        while(!s.empty()) {
            q.add(s.pop());
        }

        while(r.right!=null) {
            q.add(r.right);
            r = r.right;
        }

        while(!q.isEmpty()) {
            System.out.print(q.poll().val + " ");
        }
    }

5) kthSmallestandKthLargestNum
public static void main(String[] args) {
        TreeNode root = null;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no.of nodes: ");
        int n = sc.nextInt();

        for(int i=0; i<n; i++) {
            System.out.print("Enter val: ");
            int val = sc.nextInt();
            root = insertWithRecursion(root, val);
        }

        System.out.print("Enter k: ");
        int k = sc.nextInt();
        Stack<TreeNode> s = traversal(root);
        System.out.println("Kth smallest element is: " + s.get(k-1).val);
        System.out.println("Kth largest element is: " + s.get(s.size()-k).val);
    }

    static TreeNode insertWithRecursion(TreeNode root, int val) {
        if(root==null) {
            return new TreeNode(val);
        }

        if(val<root.val) {
            root.left = insertWithRecursion(root.left, val);
        } else {
            root.right = insertWithRecursion(root.right, val);
        }

        return root;
    }

    static Stack traversal(TreeNode root) {
        Stack<TreeNode> s = new Stack<>();
        while(root!=null) {
            s.push(root);
            root = root.left;
        }
        return s;
    }

6) floorandCeil
public static void main(String[] args) {
        TreeNode root = null;
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no.of nodes: ");
        int n = sc.nextInt();

        for(int i=0; i<n; i++) {
            System.out.print("Enter val: ");
            int val = sc.nextInt();
            root = insertWithRecursion(root, val);
        }

        System.out.print("Enter key: ");
        int key = sc.nextInt();
        System.out.println("Floor is: " + floor(root, key));
        System.out.println("Ceil is: " + ceil(root, key));
    }

    static TreeNode insertWithRecursion(TreeNode root, int val) {
        if(root==null) {
            return new TreeNode(val);
        }

        if(val<root.val) {
            root.left = insertWithRecursion(root.left, val);
        } else {
            root.right = insertWithRecursion(root.right, val);
        }

        return root;
    }

    static int floor(TreeNode root, int key) {
        int floor = Integer.MIN_VALUE;
        while(root!=null) {
            if(root.val == key) {
                return root.val;
            } else if(root.val > key) {
                root = root.left;
            } else {
                floor = root.val;
                root = root.right;
            }
        }
        return floor;
    }

    static int ceil(TreeNode root, int key) {
        int ceil = Integer.MAX_VALUE;
        while(root!=null) {
            if(root.val == key) {
                return root.val;
            } else if(root.val < key) {
                root = root.right;
            } else {
                ceil = root.val;
                root = root.left;
            }
        }
        return ceil;
    }