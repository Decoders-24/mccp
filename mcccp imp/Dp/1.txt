Open Compiler Tue, Wed:
1)
static int fib(int n) {
        if(n==0) return 0;
        if(n==1) return 0;
        if(n==2) return 1;
        return fib(n-1) + fib(n-2);
    }

2)
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int dp[] = new int[n+1];
        dp[0]=0;
        if(1<n+1) dp[1]=0;
        if(2<n+1) dp[2]=1;

        for(int i=3; i<=n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        System.out.println("Nth Fib: " + dp[n]);
    }

3)
static int findWays(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        if(n==2) return 2;
        return findWays(n-1) + findWays(n-2);
    }

4)
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int dp[] = new int[n+1];
        dp[0]=0;
        if(1<n+1) dp[1]=1;
        if(2<n+1) dp[2]=2;
        
        for(int i=3; i<=n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        System.out.println(dp[n]);
    }

5)
static int findWays(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        if(n==2) return 2;
        if(n==3) return 4;
        return findWays(n-1) + findWays(n-2) + findWays(n-3); 
    }

6)
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] dp = new int[n+1];
        dp[0]=0;
        if(1<n+1) dp[1]=1;
        if(2<n+1) dp[2]=2;
        if(3<n+1) dp[3]=4;

        for(int i=4; i<n+1; i++) {
            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];
        }
        System.out.println(dp[n]);
    }

7)
public static int nthstair(int n,int m)
    {
        int res[]=new int[n + 1];
    res[0]=0;
    res[1]=1;
    res[2]=2;

    for (int i=3;i<=n;i++) {
        res[i]=0;
        for (int j=1;j<=m&&j<=i;j++) {
            res[i]+=res[i - j];
        }
    }

    return res[n];
    }

8)
public static int nthstair(int n,int m)
    {
       if (n==0) {
        return 0;
    } else if (n==1) {
        return 1;
    } else if (n==2) {
        return 2;
    }

    int res=0;
    for (int j=1;j<=m&&j<=n;j++) {
        res+=nthstair(n-j, m);
    }

    return res;
    }

9)
public static int HouseRobber(int[] arr)
    {
        int n=arr.length;
        int dp[]=new int[n+1];
        dp[0]=0;
        dp[1]=arr[0];
        for(int i=2;i<=n;i++)
        {
            dp[i]=Math.max(dp[i-1],(dp[i-2]+arr[i-1]));
        }
        return dp[n];
    }

10)
public static int HouseRobber(int[] arr,int n)
    {
        if(n==0)
            return 0;
        if (n==1)
            return arr[0];

        return Math.max((arr[n-1]+HouseRobber(arr, n-2)),HouseRobber(arr, n-1));
    }

11)
static int LCS(String str1,String str2,int n,int m) {
        char[] arr1=str1.toCharArray();
        char[] arr2=str2.toCharArray();
        int[][] dp=new int[n+1][m+1];
        for(int i=0;i<=n;i++)
            dp[i][0]=0;
        for(int i=0;i<=m;i++)
            dp[0][i]=0;
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                if(arr1[i-1]==arr2[j-1]) {
                    dp[i][j]=dp[i-1][j-1]+1;
                } else {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }

12)
static int LCS(String str1,String str2,int n,int m)
    {
        char[] arr1=str1.toCharArray();
        char[] arr2=str2.toCharArray();
        int[][] dp=new int[n+1][m+1];
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=0;
        }
        for(int i=0;i<=m;i++)
        {
            dp[0][i]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(arr1[i-1]==arr2[j-1])
                {
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else
                {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
            
        }
        int i=n;
        int j=m;
        String res="";

        while (i>0&&j>0) {
            if (arr1[i-1]==arr2[j-1]) {
                res=String.valueOf(arr1[i-1])+res;
                i--;
                j--;
            } else if(dp[i-1][j]>dp[i][j-1]) {
                i--;
            } else {
                j--;
            }
        }
        System.out.println(res);
             return dp[n][m];
        }

13)
static int LCS(String str1, String str2, int n, int m) {
        if (n==0||m==0) {
            return 0;
        }
        if(str1.charAt(n-1)==str2.charAt(m-1)) {
            return 1+LCS(str1,str2,n-1,m-1);
        } else {
            return Math.max(LCS(str1,str2,n-1,m),LCS(str1,str2,n,m-1));
        }
    }

14)
static int minCoins(int coins[], int n, int v) {
        if (v == 0) {
            return 0;
        }
        int dp[] = new int[v + 1];
        dp[0] = 0;
        for (int i = 1; i <= v; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        for (int i = 1; i <= v; i++) {
            for (int j = 0; j < n; j++) {
                if (coins[j] <= i) {
                    dp[i] = Math.min(dp[i], (1 + dp[i - coins[j]]));
                }
            }
        }
        if(dp[v]==Integer.MAX_VALUE)
            
                return -1;
            
            
        return dp[v];
    }

15)
static int possiblepaths(int m,int n)
    {
        int[][] dp=new int[m][n];
        for(int i=0;i<n;i++)
        {
            dp[i][0]=1;
        }
        for(int i=0;i<n;i++)
        {
            dp[0][i]=1;
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<m;j++)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }

16)
 static int possiblepaths(int m,int n)
    {
        if(m==1 || n==1)
        {
            return 1;
        }
        return possiblepaths(m-1,n)+possiblepaths(m,n-1);
    }

17)
static int possiblepaths(int m,int n)
    {
        int[][] dp=new int[m][n];
        for(int i=0;i<n;i++)
        {
            dp[i][0]=1;
        }
        for(int i=0;i<n;i++)
        {
            dp[0][i]=1;
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<m;j++)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1]+dp[i-1][j-1];
            }
        }
        return dp[m-1][n-1];
    }

18)
static int possiblepaths(int m,int n)
    {
        if(m==1 || n==1)
        {
            return 1;
        }
        return possiblepaths(m-1,n)+possiblepaths(m,n-1)+possiblepaths(m-1,n-1);
    }

19)
static int cost(int m,int n,int c[][])
  {
      int[][] dp=new int[m][n];
      dp[0][0]=c[0][0];
      for(int i=1;i<m;i++)
      {
          dp[i][0]=dp[i-1][0]+c[i][0];
      }
      for(int i=1;i<n;i++)
      {
          dp[0][i]=dp[0][i-1]+c[0][i];;
      }
      for(int i=1;i<m;i++)
      {
          for(int j=1;j<n;j++)
          {
              dp[i][j]+=c[i][j]+Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]));;
          }
      }
       return dp[m-1][n-1];
  }

20)
static int cost(int c[][], int m, int n) {
        if (m < 0 || n < 0) {
            return Integer.MAX_VALUE;
        } else if (m == 0 && n == 0) {
            return c[m][n];
        } else {
            return c[m][n] + Math.min(Math.min(cost(c, m - 1, n - 1), cost(c, m - 1, n)), cost(c, m, n - 1));
        }
    }