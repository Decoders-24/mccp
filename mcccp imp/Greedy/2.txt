Open Compiler Tue, Wed:
1)
import java.io.*;
import java.util.*;

class Activity {
	int first, second;
	Activity(int first, int second) {
		this.first = first;
		this.second = second;
	}
}

class MaxActivities {
	public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int start[] = new int[n];
        int finish[] = new int[n];

        System.out.println("Start array:");
        for(int i=0; i<n; i++) {
            start[i] = sc.nextInt();
        }
        System.out.println("Finish array:");
        for(int i=0; i<n; i++) {
            finish[i] = sc.nextInt();
        }
		Activity arr[] = new Activity[n];
		for(int i=0; i<n; i++) {
            arr[i] = new Activity(start[i], finish[i]);
        }
		System.out.println(printMaxActivities(arr, n));
	}
    static int printMaxActivities(Activity arr[], int n) {
        Arrays.sort(arr, new Comparator<Activity>() {
			public int compare(Activity s1, Activity s2) {
				return s1.second - s2.second;
			}
		});
		int prev=0, selected=1;
        for(int i=1; i<n; i++) {
            if(arr[i].first>=arr[prev].second) {
                selected++;
                prev=i;
            }
        }
        return selected;
	}
}

2)
static int findMaxChainLen(int[][] A, int n) {
        Arrays.sort(A, (a,b)->a[1]-b[1]);
        int indx=0, len=1;
        for(int i=1; i<n; i++) {
            if(A[indx][1]<=A[i][0]) {
                len++;
                indx=i;
            }
        }
        return len;
    }

3)
static int findMaxArea(int[] h, int n) {
        int l=0, r=n-1;
        int area = 0;
        while(l<r) {
            //System.out.println(area);
            int height = h[l]<h[r]?h[l]:h[r];
            if(area<height*(r-l)) area = height*(r-l);
            if(h[l]<h[r]) l++;
            else r--;
        }
        return area;
    }

4)
static boolean canGiveChange(int[] A, int n) {
        int five=0, ten=0, twenty=0;
        for(int i=0; i<n; i++) {
            if(A[i]==5)
                five++;
            else if(A[i]==10)
                if(five>=1) {
                    ten++;
                    five--;
                } else return false;
            else if(A[i]==20)
                if(ten>=1 && five>=1) {
                    twenty++;
                    ten--;
                    five--;
                } else if(five>=3) {
                    twenty++;
                    five=five-3;
                } else return false;
        }
        return true;
    }

5)
static int find(int[] greed, int[] size, int n, int m) {
        Arrays.sort(greed);
        Arrays.sort(size);
        int selected=0;
        for(int i=0; i<m; i++) {
            if(size[i]>=greed[i]) selected++;
        }
        return selected;
    }

6)
static int find(int[] A, int[] B, int n) {
        Arrays.sort(A);
        Arrays.sort(B);
        int s=0;
        for(int i=0; i<n; i++) {
            s+=A[i]*B[n-1-i];
        }
        return s;
    }

7)
static int maxSumAfterK(int[] A, int n, int k) {
        Arrays.sort(A);
        for(int i=0; i<n; i++) {
            if(k>0 && A[i]<=0) {
                A[i]=-A[i];
                k--;
            } else break;
        }
        k=k%2;
        Arrays.sort(A);
        if(k==1) A[0]=-A[0];

        int s=0;
        for(int i=0; i<n; i++) {
            s+=A[i];
        }
        return s;
    }

8)
static int find(int[] A, int n) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        for(int i=0; i<n; i++)
            maxHeap.add(A[i]);
        
        while(maxHeap.size() > 1) {
            int a = maxHeap.poll(), b = maxHeap.poll();
            maxHeap.add(Math.abs(a-b));
        }
        return maxHeap.peek();
    }

9)
static int findMaxUnits(int[][] A, int n, int t) {
        Arrays.sort(A, (a,b)->b[1]-a[1]);
        int units=0;
        for(int i=0; i<n; i++) {
            int boxes = t<A[i][0]?t:A[i][0];
            t-=boxes;
            units+=(boxes*A[i][1]);
            if(t<=0) break;
        }
        return units;
    }

10)
static int findMaxChainLen(int[][] A, int n) {
        Arrays.sort(A, (a,b)->a[1]-b[1]);
        int indx=0, len=1;
        for(int i=1; i<n; i++) {
            if(A[indx][1]<=A[i][0]) {
                len++;
                indx=i;
            }
        }
        return len;
    }

11)
static int sum(int[] arr, int n) {
        int s=0;
        for(int i=0; i<n; i++) {
            s+=arr[i];
        }
        return s;
    }

    static int maxSum(int a, int[] A, int b, int[] B, int c, int[] C) {
        int s1 = sum(A, a);
        int s2 = sum(B, b);
        int s3 = sum(C, c);
        
        int i=0, j=0, k=0;
        while(s1!=s2 && s2!=s3 && s3!=s1) {
            int max=s1>s2?(s1>s3?1:3):(s2>s3)?2:3;
            System.out.println(s1+" "+s2+" "+s3+" "+max);
            if(max==1 && i<A.length) {
                s1=s1-A[i];
                i++;
            } else if(max==2 && j<B.length) {
                s2=s2-B[j];
                j++;
            } else if(k<C.length){
                s3=s3-C[k];
                k++;
            }
        }
        return s1;
    }